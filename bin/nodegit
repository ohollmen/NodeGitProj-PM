#!/usr/bin/perl
# Deploy prepper with minimal dependenceies for a Node.js / NPM / Git project.
# http://stackoverflow.com/questions/5195859/push-a-tag-to-a-remote-repository-using-git
# http://semver.org/
# https://metacpan.org/pod/CPAN::Meta::Spec
# To Install easier on Win/MacOSX, Install cpanminus
=head1 NAME

nodegit - Command line wrapper for managing Node.JS / Git releases and deployments

=head1 SYNOPSIS

    # List tags
    # - Fetches tags to catch up, but keeps current branch/tag on workarea.
    # - Fetches _all_ tags and branches to repo as side affect and can thus be also
    # used to do a comprehensive fetch even if listing tags is not the interesting part
    nodegit taglist
    
    # Prep for tagged release
    # - Checks validity / availability of package.json "version" for a Git Tag
    # - Creates tag and pushes it to default remote
    # Default is a dryrun, use --exec to actually run
    nodegit relprep --exec
    
    # Deploy tag at the application server
    # - Fetches all available tags
    # - Checkout version tag passed as --version
    # - Restart App Server
    # - Inform project contributors / participants by email
    nodegit deploy --version 0.5.2-rc.1.8
    # Impatiently deploy master
    nodegit deploy --version master
    
    # Only Restart App Server
    nodegit restart
    
    # Only Install NPM and Bower dependencies
    nodegit depsinst

=head1 DESCRIPTION

Command line wrapper "nodegit" gets installed with the NodeGitProj-PM package installation.

Quick Preview installation from Git (under /tmp):

    cd /tmp/
    git clone ssh://git@github.com/ohollmen/NodeGitProj-PM.git
    cd NodeGitProj-PM
    perldoc ./bin/nodegit
    perldoc ./NodeGitProj.pm

=cut

use strict;
use warnings;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Terse = 1;
use Getopt::Long; # CORE
use Sys::Hostname; # CORE
use NodeGitProj;
use strict;
use warnings;
my @pspec = ('version=s', 'exec','nocheck','force','conf=s', 'vcinfo', 'maxlines=i'); #
my %para = ('version' => '', 'conf' => './package.json');
my $op = shift(@ARGV) || '';
GetOptions (\%para, @pspec);

my $ops = {
  # Do not use for now.
  'relinc' => sub {
     my ($cfg) = @_;
     die("relinc Not Available (for now) !");
     # https://docs.npmjs.com/cli/version
     `npm --no-git-tag-version version patch`;
  },
  # Prep (by package.json), additionally allow params to inc version or rc
  'relprep' => sub {
     my ($cfg) = @_;
     #print(Dumper($cfg));
     my $vernew = my $tag = $cfg->taglbl();
     my $verlast = $cfg->lastver(); # Last Tag
     # NOTE: Not an error in case of repo NOT having earlier version tags !
     if (!$verlast && !$para{'nocheck'}) {die("Last Version could not be derived. Not a project dir with '.git' repo  ?".
        " Maybe there are no earlier (tagged) versions (Use --nocheck to override) ?");}
     # TODO: Use $para{'nocheck'} conditionality here ?
     if (!$para{'nocheck'}) { print(STDERR "$cfg->{'name'} Current Ver: '$vernew' (Last: '$verlast')\n"); }
     else { print(STDERR "$cfg->{'name'} Forcing to create Ver: '$vernew'\n"); }
     #TEST:NodeGitProj::newversiongood($vernew, $vernew);
     #TEST:NodeGitProj::newversiongood($verlast, $vernew);
     # Override checks
     if ($para{'nocheck'}) {print(STDERR "Skip version comparison / check for tag to be created\n");}
     # Check by comparison (last vs. current) !
     else {
       eval { NodeGitProj::newversiongood($vernew, $verlast); };
       if ($@) {die("Version check problem:".$@.". Check your package.json. To override, use --nocheck\n");}
     }
     # Follow by going to remote ...
     if ($para{'exec'}) {
       eval {
         NodeGitProj::createtag($vernew, "Release $vernew ($cfg->{'date'})");
         NodeGitProj::storetag();
       };
       if ($@) {print(STDERR "Error in tag creation or storing tag: $@");}
       
     }
     # Being stubborn and doing both --nocheck and --exec may lead to git error : fatal: tag '0.5.2-rc.0.2' already exists
     else {print(STDERR "Run with --exec to create tag (for curr version above)\n");}
  },
  # Deploy & Restart
  'deploy' => sub {
     my ($cfg) = @_;
     my $ver = $para{'version'};
     if (!$ver) { die("Missing --version !"); }
     # current-deployed vs. to-be-deployed
     print(STDERR "Deploying (fetch & checkout) Version '$ver'\n");
     $cfg->deploytag($ver, %para);
     # TODO: Make npm and bower updates
     $cfg->deps_install();
     $cfg->db_migrate();
     # Problems:
     # - bower could interactively ask for Angular version (!!)
     # - Do npm and bower modules directly installed from Git work ok (??)
     # - NPM global (-g) module installs "simple run" is not supported by NPM
     #  - TODO: Move to manage NPM Modules locally for better NPM automation support
     # $cfg->deps_install(); # Can we get the client dir from package.json (NOT, but app config.staticroot
     $cfg->server_restart();
     # 
     my $host = hostname();
     # Use name or description
     $cfg->inform("$cfg->{'name'} Version $ver Deployed", "Deployed on $cfg->{'date'} by $ENV{'USER'}\@$host");
  },
  # ONLY Restart app server
  'restart' => sub {
     my ($cfg) = @_;
     $cfg->server_restart();
     print(STDERR "Run \"pm2 status $cfg->{'main'}\" later to monitor status\n");
  },
  'taglist' => sub {
     my ($cfg) = @_;
     # Half-deploy (fetch but do not checkout)
     $cfg->deploytag(); # $ver, 'noco' => 1
     my @tags = $cfg->gettags();
     print(STDERR "Tags available\n", map({"- $_\n"} @tags));
  },
  'depsinst' => sub {
     my ($cfg) = @_;
     $cfg->deps_install();
  },
  # Dependencies version check.
  # TODO: Allow passing a template through env variable ?
  'depscheck' => sub {
	my ($cfg) = @_;
	my $moderrs = $cfg->deps_check({onlyerrors => 1});
	my $json = JSON->new->allow_nonref()->pretty;
	print($json->encode( $moderrs )); # pretty->
	#print(Dumper($moderrs));
  },
  'lint' => sub {
	my ($cfg) = @_;
	my $reps = $cfg->lint(\%para);
	my $json = JSON->new->allow_nonref()->pretty;
	print($json->encode( $reps ));
  },
  'lintrep' => sub {
	my ($cfg) = @_;
	my $d = $ENV{'LR_DATA'}; #export LR_DATA=
	my $t = $ENV{'LR_TMPL'}; #export LR_TMPL=
	my %ttopt = (TYPE => 'FILE',  SOURCE => $t, DELIMITERS => ["<%", "%>"]);
	my %ttfillopt = ();
	# Compact, beta-test nature reporting, not fully mature
	if ($d && $t) { eval("use Text::Template;use JSON;");
		my $tt = Text::Template->new(%ttopt);
		my $dj = decode_json(scalar(`cat $d`));
		print $tt->fill_in(HASH => {data => $dj});exit;
	}
	print(STDERR "Not implemented !");
  },
  
  # Increment RC number to the next available one (<= 99)
  #'rcinc' => sub {};
};
#print(STDERR Dumper(\%para)." Op:'$op'\n");

my @ops = keys(%$ops); # For below Help only
if ((!$op) || (! $ops->{$op})) {
  no strict ('refs');
  die("No op: '$op'. Enter one of ops: @ops\n");
} # $op = 'relprep';
my $cfg = NodeGitProj->new(%para);
$ops->{$op}->($cfg);

